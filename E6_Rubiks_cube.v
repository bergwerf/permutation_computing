(* Rubik's cube. *)

From CGT Require Import A1_setup B1_fmap B2_perm B3_word B4_print.
From CGT Require Import C3_subgroup_chain D1_word_search.

Require Import String.
Local Open Scope string_scope.

(***
:: Rubiks' cube ::

Here we implement the permutations of Rubik's cube, and show how we can solve an
instance of the cube. We use the same notation and face numbering as ruwix.com
(see the doc folder). Although central cells do not need a number (they remain
fixed), we reserve a number for them anyway for convenience (to exactly follow
the numbering given in the doc folder).
*)
Module Rubiks_cube.

(*
  \  i | j | k  /
   ┏━━━┳━━━┳━━━┓
 t ┃ a ┃ b ┃ c ┃ l
---┣━━━╋━━━╋━━━┫---
 s ┃ h ┃   ┃ d ┃ m
---┣━━━╋━━━╋━━━┫---
 r ┃ g ┃ f ┃ e ┃ n
   ┗━━━┻━━━┻━━━┛
  /  q | p | o  \
*)
Definition rotation (a b c d e f g h i j k l m n o p q r s t : positive) := [
  [a; g; e; c; a]; [b; h; f; d; b];
  [i; r; o; l; i]; [j; s; p; m; j]; [k; t; q; n; k]
].

Definition gen_names := ["e"; "U"; "L"; "F"; "R"; "B"; "D"].
Definition gen : list perm := map Cycles.pack [
  rotation 01 02 03 06 09 08 07 04   39 38 37   30 29 28   21 20 19   12 11 10;
  rotation 10 11 12 15 18 17 16 13   01 04 07   19 22 25   46 49 52   45 42 39;
  rotation 19 20 21 24 27 26 25 22   07 08 09   28 31 34   48 47 46   18 15 12;
  rotation 28 29 30 33 36 35 34 31   09 06 03   37 40 43   54 51 48   27 24 21;
  rotation 37 38 39 42 45 44 43 40   03 02 01   10 13 16   52 53 54   36 33 30;
  rotation 46 47 48 51 54 53 52 49   25 26 27   34 35 36   43 44 45   16 17 18
].

Definition union := λ f i, insert f i i.
Definition range := values (fold_left union (flat_map values gen) Leaf).
Definition chain := SGChain.build gen range.

(* Computing this subgroup chain takes around half a minute. *)
(* Eval vm_compute in Minkwitz.save_orbits chain. *)
Definition orbits := [
  (01, 24%nat); (02, 24%nat); (04, 22%nat); (08, 20%nat); 
  (16, 21%nat); (48, 18%nat); (24, 18%nat); (40, 16%nat); 
  (12, 15%nat); (20, 01%nat); (36, 12%nat); (52, 01%nat); 
  (28, 09%nat); (44, 14%nat); (06, 12%nat); (10, 01%nat); 
  (18, 06%nat); (34, 01%nat); (26, 10%nat); (42, 08%nat); 
  (22, 06%nat); (38, 01%nat); (54, 01%nat); (30, 01%nat); 
  (46, 01%nat); (03, 01%nat); (09, 01%nat); (17, 02%nat)
].

(***
:: Number of configurations of Rubik's cube ::

Every configuration of Rubik's cube corresponds to a permutation generated by
rotations of the cube. Therefore the total number of configurations is equal to
the order of the permutation group we just defined. Using a theorem from group
theory we can compute this order as the product of all orbit lengths.
*)
Definition ord := fold_left Pos.mul (map (λ kn, Pos.of_nat (snd kn)) orbits) 1.
Eval lazy in ord.

(* Find a strong generating set. *)
Definition nontrivial_orbits := filter (λ kn, (1 <? snd kn)%nat) orbits.
Definition table := Minkwitz.initialize nontrivial_orbits.
Definition sgs := Minkwitz.fill table gen 10000 1000 10.

(* Eval vm_compute in Minkwitz.finished sgs. *)
(* Eval vm_compute in print_csv
  (("" :: map print_positive range) ::
  map (λ row, match row with (k, _, orbit) =>
    print_positive k ::
    map (λ i,
      match lookup orbit i with
      | Some (_, w) => print_word gen_names w
      | None => ""
      end)
    range
  end) sgs). *)

(***
:: Upper-bound on the length of solutions for Rubik's cube ::

Since every permutation can be factorized using a strong generating set, and
every such factorization uses one word from every row, we can compute the
maximum solution length by adding the length of the longest word in each row.

The upper bound computed from the selected subgroup chain and search parameters
is 275. This is not a very good upper bound; Rubik's cube can in general be
solved using at most 20 face turns (http://www.cube20.org/), but this result
required a specialized proof which took decades to discover.
*)
Definition sum_list l := fold_left Nat.add l O.
Definition max_list l := fold_left Nat.max l O.
Eval vm_compute in
  let word_length fw := List.length (snd fw) in
  let word_lengths := map (λ row, map word_length (values (snd row))) sgs in
  sum_list (map max_list word_lengths).

End Rubiks_cube.
