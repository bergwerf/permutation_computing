(* Minkwitz' brute-force short-word generator search. *)

From CGT Require Import A1_setup B1_fmap B2_perm B3_word.
From CGT Require Import C3_subgroup_chain.

Module Minkwitz.

Section Algorithm.

(* The generating set. *)
Variable gen : list perm.

(***
:: Search table ::

The table is a list of triples (k, c, i ↦ π × w) representing each subgroup
generated by the Schreier-Sims algorithm. The only information needed from this
algorithm is the length of the orbits, such that the search can be terminated
when all generators are found. The triples carry the following information:
- The subgroup stabilizer point: k.
- The size of the orbit of k minus the orbit permutations already found: c.
- A map from an orbit value i to a permutation π and a word w such that:
  π maps k to i, π is generated by w, and w is fully reduced.
*)
Definition table := list (positive × nat × fmap (perm × list letter)).

(* Determine if the table is filled out. *)
Fixpoint finished (T : table) :=
  match T with
  | [] => true
  | (_, O, _) :: T' => finished T'
  | _ => false
  end.

(* Try to add the given permutation to the table. *)
Fixpoint push (T : table) (π : perm) (w : list letter) : table :=
  match T with
  | [] => []
  | (k, c, row) :: T' =>
    let j := π⋅k in
    match lookup row j with
    | None => (k, pred c, insert row j (π, w)) :: T'
    | Some (π', w') =>
      if (length w <? length w')%nat
      then (k, c, insert row j (π, w)) :: T'
      else (k, c, row) :: push T' (inv π' ∘ π) (reduce [] (word_inv w' ++ w))
    end
  end.

(* Execute the full search. *)
Definition simplify (C : SGChain.chain) : table :=
  let indices := map Pos.of_nat (seq 0 (length gen)) in
  let alphabet := map Forward indices ++ map Inverse indices in
  [].

(***
At every step of the simplification search we have to iterate through all words
of a certain length, push them into the table, and check if the table is
finished. But I doubt we can prepare this list of words explicitly, because the
required space will very quickly blow up. On the contrary, as long as we keep
the memory requirements fairly constant we can let the algorithm run for hours.
*)

End Algorithm.

End Minkwitz.
